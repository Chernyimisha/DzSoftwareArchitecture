@startuml
class OOP_seminars.accountingUser.model.NameAndSurnameValidator {
~ String userInput
+ void validate()
}
class OOP_seminars.accountingUser.model.User {
- String id
- String name
- String surname
- String phone
+ String getId()
+ void setId(String)
+ String getName()
+ void setName(String)
+ String getSurname()
+ void setSurname(String)
+ String getPhone()
+ void setPhone(String)
+ String toString()
}
class OOP_seminars.accountingUser.model.RepositoryFile {

//Частично реализован принцип инверсии зависимости, т.к. класс RepositoryFile жестко
// привязан не к классу, а к абстрактному интерфейсу FileOperation, что делает код более
//гибким.

- UserMapper mapper
- FileOperation
+ List<User> getAllUsers()
+ String addUserToBase(User)
+ User updateUser(User)
+ void deleteUser(User)
}
class OOP_seminars.accountingUser.model.UserMapper {

//Пример реализации принципа единственной ответственности, который состоит в вынесении в отдельный класс
//UserMapper компонента с функциями преобразования класса User в класс String и обратно как в отношении
//одного экземпляра класса, так и в отношении списка из User. Указанный функционал необходим для подготовки
//данных для записи в файл и после чтения из него.

+ String mapUserToString(User)
+ User mapStringToUser(String)
+ List<String> mapToString(List<User>)
}
interface OOP_seminars.accountingUser.model.FileOperation {

//Реализован принцип разделения интерфейсов - данный интерфейс узко специализирован
//и содержит абстракции методов для работы непосредственно с файлом.

~ List<String> readAllLines()
~ void saveAllLines(List<String>)
}
class OOP_seminars.accountingUser.Main {

//В виду отсутствия в данном примере супер классов и классов-наследников
//принцип подстановки Барбары Лисков не представляется возможным.
//В целом в приложении стоит отметить отсутствие круговых зависимостей -
//это к вопросу реализации пятого принципа SOLID.

+ {static} void main(String[])
}
enum OOP_seminars.accountingUser.controller.Commands {
+  NONE
+  READ
+  CREATE
+  UPDATE
+  LIST
+  DELETE
+  EXIT
}
interface OOP_seminars.accountingUser.model.Repository {

//Реализован принцип разделения интерфейсов - данный интерфейс узко специализирован
//и содержит абстракции методов манипулирования экземплярами класса User.

~ List<User> getAllUsers()
~ String addUserToBase(User)
~ User updatetUser(User)
~ void deleteUser(User)
}
class OOP_seminars.accountingUser.controller.UserController {

//Принцип единственной ответственности-только посредник
//между view и model с помощью атрибута Repository.
//Частично реализован принцип инверсии зависимости,
//т.к. класс UserController жестко привязан не к классу,
//а к абстрактному интерфейсу Repository, что делает код более
//гибким.

- Repository
- User getUser()
+ void createUser()
+ void readUser()
+ void readList()
+ void updateUser()
+ void deleteUser()
- User getNewUser()
+ {static} String prompt(String)
}
class OOP_seminars.accountingUser.model.FileOperationImpl {

//Принцип единственной ответственности-только работа с файлом.

- String fileName
+ List<String> readAllLines()
+ void saveAllLines(List<String>)
}
class OOP_seminars.accountingUser.view.ViewUser {

//В приложении реализован принцип открытости или закрытости - приложение разделено на модули и код построен
//таким образом, что при необходимости увеличения функционала придется только добавлять в классы каждого модуля
//дополнительные команды, методы и поля не изменяя уже написанный код.

- UserController userController
+ void run()
}

OOP_seminars.accountingUser.view.ViewUser ..> OOP_seminars.accountingUser.controller.Commands : uses

OOP_seminars.accountingUser.controller.UserController --> OOP_seminars.accountingUser.model.NameAndSurnameValidator : association
OOP_seminars.accountingUser.controller.UserController ..> OOP_seminars.accountingUser.model.User : uses
OOP_seminars.accountingUser.model.RepositoryFile ..> OOP_seminars.accountingUser.model.User : uses

OOP_seminars.accountingUser.model.RepositoryFile --> OOP_seminars.accountingUser.model.UserMapper : association

OOP_seminars.accountingUser.model.UserMapper ..> OOP_seminars.accountingUser.model.User : uses

OOP_seminars.accountingUser.Main ..> OOP_seminars.accountingUser.view.ViewUser : uses
OOP_seminars.accountingUser.Main ..> OOP_seminars.accountingUser.controller.UserController : uses
OOP_seminars.accountingUser.Main ..> OOP_seminars.accountingUser.model.FileOperationImpl : uses
OOP_seminars.accountingUser.Main ..> OOP_seminars.accountingUser.model.RepositoryFile : uses
OOP_seminars.accountingUser.model.Repository <|.. OOP_seminars.accountingUser.model.RepositoryFile : implements
OOP_seminars.accountingUser.model.FileOperation <|.. OOP_seminars.accountingUser.model.FileOperationImpl : implements


OOP_seminars.accountingUser.controller.UserController "1" *-- "1" OOP_seminars.accountingUser.model.Repository : contains
OOP_seminars.accountingUser.view.ViewUser "1" *-- "1" OOP_seminars.accountingUser.controller.UserController : contains
OOP_seminars.accountingUser.model.RepositoryFile "1" *-- "1" OOP_seminars.accountingUser.model.FileOperation : contains





@enduml