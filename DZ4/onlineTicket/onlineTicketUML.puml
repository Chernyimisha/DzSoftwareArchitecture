@startuml

'интерфейсы
interface UserActions {
// Этот компонент определяет контракты для действий пользователя.

+authorize(username: String, password: String): boolean
+selectRoute(routeId: String, time: DateTime): boolean
+checkTicketAvailability(): boolean
+checkFunds(): boolean
+reserveTicket(): boolean
+deductFunds(): boolean
}

UserActions <|.. User: implements

interface TicketActions {
//Этот компонент определяет контракты для операций с билетами.

+confirmPurchase(): boolean
+updateTicketAvailability(): void
+cancelReservation(): boolean
}

TicketActions <|.. Ticket: implements

' Классы и операции

class Main{
//Класс, вызывающий программу на исполнение. Создает
//экземпляр пользователя, имитирует его активность
//и выводит на печать результат бронирования.

+ {static} void main(String[])
}

Main ..> User : uses

class User {
//Этот компонент описывает класс User, имплементирующий интерфейс
//UserAction и содержит методы, определяющие активность пользователя
//при бронировании билетов.

-double funds;
'предусловия
+authorize(username: String, password: String): boolean
+selectRoute(routeId: String, time: DateTime): boolean
+checkTicketAvailability(): boolean
+checkFunds(): boolean

'постусловия
+reserveTicket(): boolean
+deductFunds(): boolean
}

User ..> BusTicket : uses

abstract class Ticket {
//Этот компонент описывает абстрактный класс Ticket, имплементирующий интерфейс
//TicketAction и содержит поля: номер маршрута, время отправления, цена.

+routeId: String
+departureTime: DateTime
+price: Money
}


class BusTicket {
//Этот компонент описывает класс BusTicket,
//наследующий свойства компонента Ticket
//и содержит поля: номер билета, номер маршрута,
//время отправления, цена. Также класс BusTicket
//реализует методы интерфейса TicketAction.

~number: int
~routeId: String
~departureTime: DateTime
~price: Money

'постусловия
+confirmPurchase(): boolean
+updateTicketAvailability(): void
+cancelReservation(): boolean
}

BusTicket --|> Ticket: extends


' Предусловия

User --> User : authorize(username, password)
User --> User : selectRoute(routeId, time)
User --> User : checkTicketAvailability()
User --> User : checkFunds()
User --> BusTicket : reserveTicket()

' Постусловия

User --> User : deductFunds()
User --> BusTicket : confirmPurchase()
User --> BusTicket : updateTicketAvailability()
User --> BusTicket : cancelReservation()

' Инварианты

User --> User : [invariant] Funds >= BusTicket.price
BusTicket --> BusTicket : [invariant] Price > 0
Ticket --> Ticket : [invariant] Price > 0

@enduml